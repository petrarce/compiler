/*declarations*/
%start	S
%left '-'
%left '&'
%left '|'
%left '*'
%{
#include <iostream>
#include "regexp_grammar.tab.hpp"
#include "regex_lexer.hpp"

using namespace std;

nfa final_nfa;
%}
%%
/*rules*/
S 	: Exp								{final_nfa = $1; cout << "S=>Exp " << endl;};

Exp	: 		'(' Exp ')'					{ $$ = $2; printf("Exp=>(Exp);\n");}
		|	Exp '|' Exp 				{ $$ = nfa::nfa_convert_union($1 ,$3);
											printf("Exp=>Exp|Exp;\n");}
		|	Exp '&' Exp 				{ $$ = nfa::nfa_convert_union($1 ,$3);
											printf("Exp=>Exp&Exp;\n");}
		|	Exp '-' Exp 				{ printf("Exp=>Exp-Exp;\n");}
		| 	_Exp						{ $$ = $1; printf("Exp=>_Exp;\n");};

_Exp:		_Exp _Term					{ $$ = nfa::nfa_convert_concat($1 ,$2); 
											printf("_Exp=>_Exp _Term;\n");}
		|	_Exp _Clause				{ $$ = nfa::nfa_convert_concat($1 ,$2); 
											printf("_Exp=>_Exp _Clause;\n");}
		|	_Clause						{ $$ = $1; 
											printf("_Exp=>_Clause;\n");}
		|	_Term						{ $$ = $1; 
											printf("_Exp=>_Term;\n");};

_Clause:	_Term'*'					{ $$ = nfa::nfa_convert_clausure($1); 
											printf("_Clause=>_Term*;\n");}
		| 	'('Exp')''*'				{ $$ =  nfa::nfa_convert_clausure($2); 
											printf("_Clause=>(Exp)*;\n");};

_Term:		Set 						{ $$ = $1; printf("_Term=>Set;\n");}
		| 	Symb						{ $$ = $1; printf("_Term=>Symb;\n");};;



Set	:		'{' Set_i '}'				{ $$ = $2; printf("Set=>{Set_i};\n");};

Set_i: 		Symb ',' Set_i				{ $$ = nfa::nfa_convert_union($1 ,$3); 
											printf("Set_i=>Symb , Set_i;\n");};
		| 	Symb						{ $$ = $1; printf("Set_i=>Symb;\n");};

Symb: 		'a'							{ 	nfa new_nfa(2); 
											string link_str = "0@a@1\\";
											new_nfa.link_state(link_str); 
											new_nfa.set_accepting(1, REGEXP);
											$$ = new_nfa;
											printf("Symb=>a\n");}
		| 	'b'							{ 	nfa new_nfa(2); 
											string link_str = "0@b@1\\";
											new_nfa.link_state(link_str); 
											new_nfa.set_accepting(1, REGEXP);
											$$ = new_nfa; printf("Symb=>b\n");}
		|	'0'							{ 	nfa new_nfa(2); 
											string link_str = "0@@1\\";
											new_nfa.link_state(link_str); 
											new_nfa.set_accepting(1, REGEXP);
											$$ = new_nfa;
											printf("Symb=>eps\n");};


%%
/*programs*/