/*declarations*/
%token Int Real Id If Else While Literal
%start PROG
%left '-' '+'
%left '*' '/'
%left '%'
%{
#include <iostream>
#include <while_grammar.tab.hpp>

using namespace std;

//TODO:redefine YYSTYPE to custom type	

#ifndef yylex
#define yylex def_yylex
#endif
#ifndef yyerror
#define yyerror def_yyerror
#endif
void def_yyerror(char* str);
int def_yylex();

%}
%%
/*rules*/
PROG: 				STMT

STMT: 	
					DEF STMT
				| 	_STMT STMT
				| 	_STMT
_STMT:			 	IF
				|	WHILE
				|	ASSIGN
				|	PROCEDURE

DEF:				DEF _DEF
				|	_DEF
_DEF: 				TYPE VARLIST';'
VARLIST:			Id',' VARLIST
				|	Id '=' EXPR',' VARLIST
				|	Id
				|	Id '=' EXPR
TYPE: 				Int 
				| 	Real




IF:					If'('EXPR')''{'STMT'}'Else'{'STMT'}'
WHILE:				While'('EXPR')''{'STMT'}'
ASSIGN:				Id '=' EXPR';'

PROCEDURE: 			Id'('ARGS')'';'
ARGS:				ARG 
				| 	ARG',' ARGS
ARG:				EXPR

EXPR: 				OBJ
				| 	EXPR '+' EXPR
				| 	EXPR '-' EXPR
				| 	EXPR '*' EXPR
				| 	EXPR '/' EXPR
				| 	EXPR '%' EXPR
				| 	'('EXPR')'

OBJ:				Id 
				| 	Literal

%%
/*programs*/
void def_yyerror(char* str)
{
	printf("PARSING FAILURE: %s", str);
}

int def_yylex()
{
	return 0;
}

int main()
{
	return yyparse();
}