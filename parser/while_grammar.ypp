/*declarations*/
%token Type Id If Else While Literal
%start PROG
%left '-' '+'
%left '*' '/'
%left '%'
%{
#include <iostream>
#include <while_grammar.tab.hpp>

using namespace std;

//TODO:redefine YYSTYPE to custom type	

#ifndef yylex
#define yylex def_yylex
#endif
#ifndef yyerror
#define yyerror def_yyerror
#endif
void def_yyerror(char* str);
int def_yylex();

%}
%%
/*rules*/
PROG: 				STMT 							/*PROG.ok = STMT.ok*/

STMT: 				DEF STMT 						/*STMT0.ok = DEF1.ok && STMT2.ok, */
				| 	_STMT STMT 						/*STMT0.ok = _STMT.ok && STMT2.ok*/
				| 	_STMT 							/*STMT0.ok=STMT1.ok*/

_STMT:			 	IF 								/*_STMT0.ok=IF1.ok*/
				|	WHILE 							/*_STMT0.ok=WHILE1.ok*/
				|	ASSIGN							/*_STMT0.ok=ASSIGN1.ok*/
				|	PROCEDURE						/*_STMT0.ok=PROCEDURE1.ok*/

DEF:				DEF _DEF						/*DEF0.ok=DEF1.ok&&_DEF2.ok*/
				|	_DEF 							/*DEF0.ok=_DEF1.ok*/

_DEF: 				TYPE VARLIST';'					/*_DEF0.ok=VARLIST.ok*/
													/*VARLIST2.type=TYPE1.val*/
VARLIST:			Id',' VARLIST 					/*VARLIST0.ok = !is_Id_in_stbl(Id.val)&&VARLIST2.ok*/
													/*deploy_stbl(Id.val, VARLIST0.type)*/
													/*VARLIST2.type=VARLIST0.type*/
				|	Id '=' EXPR',' VARLIST    		/*VARLIST0.ok = !is_Id_in_stbl(Id.val)&&EXPR3.ok&&VARLIST5.ok*/
													/*deploy_stbl(Id.val, VARLIST0.type)*/
													/*VARLIST5.type=VARLIST0.type*/
				|	Id 								/*VARLIST0.ok = !is_Id_in_stbl(Id.val)*/
													/*deploy_stbl(Id.val, VARLIST0.type)*/
				|	Id '=' EXPR 					/*VARLIST0.ok = !is_Id_in_stbl(Id.val)&&EXPR3.ok*/
													/*deploy_stbl(Id.val, VARLIST0.type)*/
TYPE: 				Type 							/*TYPE.val=Type.val*/




IF:					If'('EXPR')''{'STMT'}'Else'{'STMT'}'	/*IF0.ok=EXPR3.ok && STMT6.ok && STMT10.ok*/
WHILE:				While'('EXPR')''{'STMT'}'				/*IF0.ok=EXPR3.ok && STMT6.ok*/
ASSIGN:				Id '=' EXPR';'							/*ASSIGN0.ok = is_Id_in_stbl(Id.val) && EXPR.ok*/

PROCEDURE: 			Id'('ARGS')'';'							/*PROCEDURE0.ok=ARGS3.ok*/
ARGS:				ARG 									/*ARGS0.ok = ARG1.ok*/
				| 	ARG',' ARGS 							/*ARGS0.ok = ARG1.ok && ARGS3.ok*/
ARG:				EXPR 									/*ARG0.ok = EXPR.ok*/

EXPR: 				OBJ 									/*EXPR0.ok=OBJ.ok*/
				| 	EXPR '+' EXPR 							/*EXPR0.ok=EXPR1.ok && EXPR3.ok*/
				| 	EXPR '-' EXPR 							/*EXPR0.ok=EXPR1.ok && EXPR3.ok*/
				| 	EXPR '*' EXPR 							/*EXPR0.ok=EXPR1.ok && EXPR3.ok*/
				| 	EXPR '/' EXPR 							/*EXPR0.ok=EXPR1.ok && EXPR3.ok*/
				| 	EXPR '%' EXPR 							/*EXPR0.ok=EXPR1.ok && EXPR3.ok*/
				| 	'('EXPR')' 								/*EXPR0.ok=EXPR2.ok*/

OBJ:				Id 										/*OBJ0.ok = is_Id_in_stbl(Id.val)*/
				| 	Literal 								/*OBJ0.ok = true*/

%%
/*programs*/
void def_yyerror(char* str)
{
	printf("PARSING FAILURE: %s", str);
}

int def_yylex()
{
	return 0;
}

int main()
{
	return yyparse();
}